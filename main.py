from dotenv import load_dotenv
import os
import telebot
import pandas as pd
from telebot.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    Message,
)
import sqlite3 as sql
import datetime
from openai import OpenAI


doing_search = []

df = pd.read_excel("data.xlsx")
blacklist = []

load_dotenv()
token = os.getenv("TOKEN")
openai_token = os.getenv("OPENAI")

bot = telebot.TeleBot(token)

print("Bot Started")


@bot.callback_query_handler(func=lambda x: True)
def button_callback(call: CallbackQuery):
    if call.data == "cat":
        bot.answer_callback_query(call.id)
        handle_categories(call.message)
    elif call.data == "apps":
        bot.answer_callback_query(call.id)
        apps_start(call.message)
    elif call.data == "search":
        bot.answer_callback_query(call.id)
        search_starting(call.message)


@bot.message_handler(commands=["start", "help"])
def handle_start(message: Message):

    add_data_to_db("start", str(message.from_user.id))

    cat_button = InlineKeyboardButton("üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cat")
    apps_button = InlineKeyboardButton("üíª –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data="apps")
    search_button = InlineKeyboardButton("üîé –ü–æ–∏—Å–∫", callback_data="search")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(cat_button, apps_button, search_button)

    bot.send_message(
        message.chat.id,
        """üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ª—é–±—ã—Ö —Ü–µ–ª–µ–π.\n
üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
üíª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apps –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –≤–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò.
‚ùó –ù–∞—à–ª–∏ –æ—à–∏–±–∫—É, –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É? –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /contact.\n
–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤:
‚ö†Ô∏è - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –†–æ—Å—Å–∏–∏ –Ω—É–∂–µ–Ω VPN.
üíª - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç.""",
        reply_markup=keyboard,
    )


@bot.message_handler(commands=["categories"])
def handle_categories(message: Message):
    categories_list = list(sorted(df["category"].unique()))
    categories_text = "\n".join(
        f"{i + 1}. {category}" for i, category in enumerate(categories_list)
    )

    search_button = InlineKeyboardButton("üîé –ü–æ–∏—Å–∫", callback_data="search")
    apps_button = InlineKeyboardButton("üíª –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data="apps")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(apps_button, search_button)

    bot.send_message(
        message.chat.id,
        f"üéØ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n{categories_text}",
        reply_markup=keyboard,
    )
    add_data_to_db("categories", str(message.from_user.id))


@bot.message_handler(commands=["apps"])
def apps_start(message: Message):
    add_data_to_db("apps", str(message.from_user.id))
    bot.send_message(
        message.chat.id,
        "üíª –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /categories.",
    )
    bot.register_next_step_handler(message, handle_apps)


def handle_apps(message: Message):
    try:
        if message.text is not None:
            if message.text.strip() != "/apps":
                if message.text.strip() != "/categories":
                    if message.text.strip() != "/start":
                        if message.text.strip() != "/contact":
                            category_number = int(message.text.strip()) - 1
                            if category_number >= 0:
                                category = list(sorted(df["category"].unique()))[
                                    category_number
                                ]
                                apps_in_category = df[df["category"] == category]

                                apps_text = ""
                                for _, app in apps_in_category.iterrows():
                                    vpn_icon = "‚ö†Ô∏è " if app["vpn_needed"] else ""
                                    account_icon = "üíª " if app["login_needed"] else ""
                                    apps_text += f"""{vpn_icon}{account_icon}<a href="{app['link']}">{app['name']}</a>: {app['description']}.\n\n"""

                                bot.send_message(
                                    message.chat.id,
                                    f'‚ô¶ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "<b>{category}</b>":\n\n{apps_text}',
                                    parse_mode="HTML",
                                    disable_web_page_preview=True,
                                )
                            else:
                                raise IndexError
                        else:
                            handle_contact(message)
                    else:
                        handle_start(message)
                else:
                    handle_categories(message)
            else:
                handle_apps(message)
        else:
            raise ValueError

    except (IndexError, ValueError):
        bot.send_message(
            message.chat.id,
            "‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /categories. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /apps.",
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["contact"])
def handle_contact(message: Message):
    if message.from_user.id not in blacklist:
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞! –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.",
        )
        add_data_to_db("contact", str(message.from_user.id))
        bot.register_next_step_handler(message, forward_contact)
    else:
        bot.send_message(
            message.chat.id,
            "üòá –î—Ä—É–∂–æ–∫, —Ç—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!",
        )


def forward_contact(message: Message):
    if message.text != "/cancel":
        user_id = message.from_user.id
        username = message.from_user.username
        forwarded = bot.forward_message(1038099964, message.chat.id, message.message_id)

        bot.send_message(
            forwarded.chat.id,
            f"–≠—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id})",
        )

        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞. –°–ø–∞—Å–∏–±–æ!",
        )
    else:
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@bot.message_handler(commands=["reply"])
def handle_reply(message: Message):
    try:
        _, user_id, reply_text = message.text.split(" ", 2)
        user_id = int(user_id)
        if message.from_user.id == int(1038099964):
            bot.send_message(user_id, f"‚ùó –û—Ç–≤–µ—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞:\n\n{reply_text}")
            bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            bot.send_message(
                message.chat.id,
                "–•–∞-—Ö–∞ —Ö–æ—Ç–µ–ª –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å? –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞ üòàüòàüòà",
            )

    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/reply {user_id} {message_text}`.",
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["reload_df"])
def handle_reload_df(message: Message):
    global df

    if message.from_user.id == int(1038099964):
        df = pd.read_excel("data.xlsx")
        bot.send_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        bot.send_message(
            message.chat.id,
            "–•–∞-—Ö–∞ —Ö–æ—Ç–µ–ª –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å? –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞ üòàüòàüòà",
        )


def get_all_apps():
    all_apps = ""
    for id, app in df.iterrows():
        app_info = f"{id + 1}, {app['name']}, {app['description']}\n"
        all_apps += app_info

    return all_apps


def get_line_by_app_row(row_number):
    try:
        if row_number != 0:
            app = df.iloc[row_number - 1]
            vpn_icon = "‚ö†Ô∏è " if app["vpn_needed"] else ""
            account_icon = "üíª " if app["login_needed"] else ""
            app_text = f"""{vpn_icon}{account_icon}<a href="{app['link']}">{app['name']}</a>: {app['description']}.\n\n"""
            return app_text
        else:
            return f"‚ùó –ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏—Å–ø–æ–ª—å–∑—É—è /categories –∏ /apps. –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /contact."
    except IndexError:
        return "‚ùó GPT –æ—Ç–≤–µ—Ç–∏–ª –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –≠—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ä–µ–¥–∫–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞."


@bot.message_handler(commands=["search"])
def search_starting(message: Message):
    if message.from_user.id not in doing_search:
        bot.send_message(
            message.chat.id,
            'üîé –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ", –∏ –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.',
            parse_mode="Markdown",
        )
        add_data_to_db("search", str(message.from_user.id))

        bot.register_next_step_handler(message, search_handling)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–≤–∞ –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞!",
        )


def search_handling(message: Message, flag_send_msg=True, searching_message=None):
    try:
        if message.text is not None:
            if message.text.strip() != "/apps":
                if message.text.strip() != "/categories":
                    if message.text.strip() != "/start":
                        if message.text.strip() != "/contact":
                            if message.text.strip() != "/cancel":
                                if message.from_user.id not in doing_search:
                                    doing_search.append(message.from_user.id)
                                user_asks = message.text
                                list_of_apps = get_all_apps()

                                if flag_send_msg:
                                    searching_message = bot.send_message(
                                        message.chat.id, "üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ..."
                                    )

                                client = OpenAI(api_key=openai_token)

                                response = client.chat.completions.create(
                                    model="gpt-3.5-turbo",
                                    messages=[
                                        {
                                            "role": "user",
                                            "content": '–ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –∑–∞–ø–ª–∞—Ç—è—Ç $100, –∑–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—É—é —Ä–∞–±–æ—Ç—É. –ì–ª–∞–≤–Ω–æ–µ –≤—Å—ë –¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –£ —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "'
                                            + user_asks
                                            + '" –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –û–î–ù–û –∏–ª–∏ –ù–ï–°–ö–û–õ–¨–ö–û –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–¥–æ 5 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π) –∏–∑ —Å–ø–∏—Å–∫–∞. –í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä—è–º–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é. –¢–µ–±–µ –¥–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ç–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –í –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ id —ç—Ç–æ–≥–æ/—ç—Ç–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¶–ò–§–†–ê–ú–ò —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ. –ï—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —á–∏—Å–ª–∞/—á–∏—Å–µ–ª, —Ç–æ —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å —Ä–∞–±–æ—Ç—É. –ï—Å–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ—Ç, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —á–∏—Å–ª–æ 0. –ù–∞–ø–æ–º–Ω—é, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –¢–û–õ–¨–ö–û –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –º–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 5 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ id, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n'
                                            + list_of_apps,
                                        }
                                    ],
                                )

                                gpt_response = response.choices[0].message.content
                                print(gpt_response)

                                final_response = ""

                                for letter in gpt_response:
                                    if letter.isdigit():
                                        final_response += letter
                                    else:
                                        final_response += " "

                                final_response = final_response.split()
                                final2 = ""
                                for elem in final_response:
                                    final2 += get_line_by_app_row(int(elem))

                                if final2 != "":
                                    bot.delete_message(
                                        message.chat.id, searching_message.message_id
                                    )

                                    bot.send_message(
                                        message.chat.id,
                                        (
                                            f"–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n{final2}"
                                            if not final2.startswith("‚ùó")
                                            else final2
                                        ),
                                        parse_mode="HTML",
                                        disable_web_page_preview=True,
                                    )

                                    doing_search.remove(message.from_user.id)
                                else:
                                    search_handling(
                                        message,
                                        flag_send_msg=False,
                                        searching_message=searching_message,
                                    )
                            else:
                                bot.send_message(
                                    message.chat.id,
                                    "‚úÖ –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.",
                                    parse_mode="Markdown",
                                )
                        else:
                            handle_contact(message)
                    else:
                        handle_start(message)
                else:
                    handle_categories(message)
            else:
                apps_start(message)
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä. –Ø —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—Å—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search.",
                parse_mode="Markdown",
            )

    except Exception as e:
        print(e)
        print("–ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
        search_handling(
            message, flag_send_msg=False, searching_message=searching_message
        )


def add_data_to_db(command_used, user_id):
    conn = sql.connect("users_data.db")
    c = conn.cursor()

    date = datetime.datetime.now()

    c.execute(
        "INSERT INTO data (command_used, date, user_id) VALUES (?, ?, ?)",
        (command_used, date, user_id),
    )

    conn.commit()
    conn.close()


def get_all_user_ids():
    conn = sql.connect("users_data.db")
    c = conn.cursor()

    c.execute("SELECT DISTINCT user_id FROM data")
    user_ids = c.fetchall()

    conn.close()

    return [user_id[0] for user_id in user_ids]


@bot.message_handler(commands=["message_all"])
def message_all_handling(message: Message):
    if message.from_user.id == int(1038099964):
        _, text = message.text.split(" ", 1)

        for id in get_all_user_ids():
            try:
                bot.send_message(id, text, parse_mode="Markdown")
            except Exception:
                pass
    else:
        bot.send_message(
            message.chat.id,
            "–•–∞-—Ö–∞ —Ö–æ—Ç–µ–ª –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å? –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞ üòàüòàüòà",
        )


@bot.message_handler(commands=["get_data"])
def message_all_handling(message: Message):
    if message.from_user.id == int(1038099964):
        with open("users_data.db", "rb") as f:
            bot.send_document(message.chat.id, f)
    else:
        bot.send_message(
            message.chat.id,
            "–•–∞-—Ö–∞ —Ö–æ—Ç–µ–ª –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å? –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞ üòàüòàüòà",
        )


bot.infinity_polling()
